generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int       @id @default(autoincrement())
  name                 String
  email                String    @unique
  role                 Role      @default(STUDENT)
  password             String
  passwordConfirm      String?   @map("password_confirm")
  passwordChangedAt    DateTime? @map("password_changed_at")
  passwordResetToken   String?   @map("password_reset_token")
  passwordResetExpires DateTime? @map("password_reset_expires")
  username             String    @unique
  photo                String?   @default("/default.png")
  gender               String?
  birthDate            DateTime? @map("birth_date")
  address              String?
  city                 String?
  country              String?
  loginCount           Int?      @default(0) @map("login_count")
  createdAt            DateTime? @default(now()) @map("created_at")
  updatedAt            DateTime? @updatedAt @map("updated_at")
  active               Boolean?  @default(true)
  lastLogin            DateTime? @map("last_login")

  @@map("users")
}

enum Role {
  STUDENT
  LIBRARIAN
  ADMIN
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]

  @@map("categories")
}

model Letter {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]

  @@map("letters")
}

model Publisher {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]

  @@map("publishers")
}

model Author {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  biography String
  photo     String?   @default("/default.png")
  wikipedia String?
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  books Book[]

  @@map("authors")
}

model Genre {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]

  @@map("genres")
}

model Language {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]

  @@map("languages")
}

model Format {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]

  @@map("formats")
}

model Book {
  id          Int        @id @default(autoincrement())
  title       String     @unique
  pageCount   Int        @map("page_count")
  summary     String
  categories  Category[]
  isbn        String     @unique
  authors     Author[]
  genres      Genre[]
  letter      Letter     @relation(fields: [letterId], references: [id])
  letterId    Int        @map("letter_id")
  publisher   Publisher  @relation(fields: [publisherId], references: [id])
  publisherId Int        @map("publisher_id")
  language    Language   @relation(fields: [languageId], references: [id])
  languageId  Int        @map("language_id")
  format      Format     @relation(fields: [formatId], references: [id])
  formatId    Int        @map("format_id")
  releaseDate DateTime   @map("release_date")
  createdAt   DateTime?  @default(now()) @map("created_at")
  updatedAt   DateTime?  @updatedAt @map("updated_at")

  @@map("books")
}
