// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName            String
  lastName             String
  email                String    @unique
  role                 Role      @relation(fields: [roleId], references: [id])
  roleId               String    @db.ObjectId
  password             String
  passwordConfirm      String?
  passwordChangedAt    DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  username             String    @unique
  photo                String?   @default("/default.png")
  gender               String?
  birthDate            DateTime?
  address              String?
  city                 String?
  country              String?
  loginCount           Int?      @default(0)
  createdAt            DateTime? @default(now())
  updatedAt            DateTime? @updatedAt
  active               Boolean?  @default(true)
  lastLogin            DateTime?
}

model Role {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  users User[]
}

model Category {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  books Book[]
}

model Letter {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  books Book[]
}

model Publisher {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  books Book[]
}

model Author {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  bookIDs String[] @db.ObjectId
  books   Book[]   @relation(fields: [bookIDs], references: [id])
}

model Genre {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  books Book[]
}

model Language {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  books Book[]
}

model Format {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  books Book[]
}

model Book {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  pageCount   Int
  summary     String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String    @db.ObjectId
  isbn        String    @unique
  authorIDs String[]   @db.ObjectId
  authors  Author[] @relation(fields: [authorIDs], references: [id])
  letter      Letter    @relation(fields: [letterId], references: [id])
  letterId    String    @db.ObjectId
  publisher   Publisher @relation(fields: [publisherId], references: [id])
  publisherId String    @db.ObjectId
  genre       Genre     @relation(fields: [genreId], references: [id])
  genreId     String    @db.ObjectId
  language    Language  @relation(fields: [languageId], references: [id])
  languageId  String    @db.ObjectId
  format      Format    @relation(fields: [formatId], references: [id])
  formatId    String    @db.ObjectId
  releaseDate DateTime
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}
